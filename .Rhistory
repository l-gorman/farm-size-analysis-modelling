#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
base_directory <- "outputs/quantile_location/"
model_files <- list.files(base_directory)
model_files <- model_files[grepl(".rda", model_files,fixed=T)]
foreach(i=35:40,.combine=rbind,.packages = c("magrittr", "tidybayes"))%dopar%{
model_file <- model_files[i]
m <- loadRData(paste0(base_directory,model_file))
model <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
sub("_[^_]+$", "", .)
quantile <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
gsub(paste0(model,"_"), "", .)
if(model=="ADM0_NAME"){
result <- m %>%
gather_draws(b_Intercept, sd_ADM0_NAME__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE_village"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM2_CODE_village"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM2_CODE__Intercept,
sd_ADM0_NAME:ADM2_CODE:village__Intercept) %>%
median_qi()
}else{
stop("invalid model")
}
result$model <- model
result$quantile <- quantile
result
# data.frame(x=runif(4),i=i)
}
i <- 35
model_file <- model_files[i]
m <- loadRData(paste0(base_directory,model_file))
model_file
model <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
sub("_[^_]+$", "", .)
quantile <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
gsub(paste0(model,"_"), "", .)
if(model=="ADM0_NAME"){
result <- m %>%
gather_draws(b_Intercept, sd_ADM0_NAME__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE_village"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept,
sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept) %>%
median_qi()
}else if(model=="ADM0_NAME_ADM2_CODE_village"){
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM2_CODE__Intercept,
sd_ADM0_NAME:ADM2_CODE:village__Intercept) %>%
median_qi()
}else{
stop("invalid model")
}
model_files
i <- 11
model_file <- model_files[i]
m <- loadRData(paste0(base_directory,model_file))
m
model <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
sub("_[^_]+$", "", .)
quantile <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
gsub(paste0(model,"_"), "", .)
model
model=="ADM0_NAME_ADM1_CODE"
result <- m %>%
gather_draws(b_Intercept,
sd_ADM0_NAME__Intercept,
sd_ADM0_NAME:ADM1_CODE__Intercept) %>%
median_qi()
result <- m %>%
gather_draws(b_Intercept, regex = T
) %>%
median_qi()
result
result <- m %>%
gather_draws(b_Intercept,ADM0_NAME, regex = T
) %>%
median_qi()
result <- m %>%
gather_draws(b_Intercept,`ADM0_NAME`, regex = T
) %>%
median_qi()
result
result <- m %>%
gather_draws(b_Intercept,`.*ADM0_NAME.*`, regex = T
) %>%
median_qi()
result
result <- m %>%
gather_draws(b_Intercept,`.*sd_ADM0_NAME.*`, regex = T
) %>%
median_qi()
result
foreach(i=35:40,.combine=rbind,.packages = c("magrittr", "tidybayes"))%dopar%{
model_file <- model_files[i]
m <- loadRData(paste0(base_directory,model_file))
model <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
sub("_[^_]+$", "", .)
quantile <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
gsub(paste0(model,"_"), "", .)
result <- m %>%
gather_draws(b_Intercept,`.*sd_ADM0_NAME.*`, regex = T
) %>%
median_qi()
# if(model=="ADM0_NAME"){
#   result <- m %>%
#     gather_draws(b_Intercept, sd_ADM0_NAME__Intercept) %>%
#     median_qi()
#
#
# }else if(model=="ADM0_NAME"){
#   result <- m %>%
#     gather_draws(b_Intercept,
#                  sd_ADM0_NAME__Intercept) %>%
#     median_qi()
# }else if(model=="ADM0_NAME_ADM1_CODE"){
#
# }else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE"){
#   result <- m %>%
#     gather_draws(b_Intercept,
#                  sd_ADM0_NAME__Intercept,
#                  sd_ADM0_NAME:ADM1_CODE__Intercept,
#                  sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept) %>%
#     median_qi()
# }else if(model=="ADM0_NAME_ADM1_CODE_ADM2_CODE_village"){
#   result <- m %>%
#     gather_draws(b_Intercept,
#                  sd_ADM0_NAME__Intercept,
#                  sd_ADM0_NAME:ADM1_CODE__Intercept,
#                  sd_ADM0_NAME:ADM1_CODE:ADM2_CODE__Intercept,
#                  sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept) %>%
#     median_qi()
# }else if(model=="ADM0_NAME_ADM2_CODE_village"){
#   result <- m %>%
#     gather_draws(b_Intercept,
#                  sd_ADM0_NAME__Intercept,
#                  sd_ADM0_NAME:ADM2_CODE__Intercept,
#                  sd_ADM0_NAME:ADM2_CODE:village__Intercept) %>%
#     median_qi()
# }else{
#   stop("invalid model")
# }
result$model <- model
result$quantile <- quantile
result
# data.frame(x=runif(4),i=i)
}
final_result <- foreach(i=35:40,.combine=rbind,.packages = c("magrittr", "tidybayes"))%dopar%{
model_file <- model_files[i]
m <- loadRData(paste0(base_directory,model_file))
model <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
sub("_[^_]+$", "", .)
quantile <- model_file %>%
gsub(".rda","",fixed=T,.) %>%
gsub(paste0(model,"_"), "", .)
result <- m %>%
gather_draws(b_Intercept,`.*sd_ADM0_NAME.*`, regex = T
) %>%
median_qi()
result$model <- model
result$quantile <- quantile
result
}
final_result
opt <- list(
indirectory="outputs/quantile_location",
outdirectory="outputs/quantile_model_summaries",
outnameindex="1",
ncores="4"
)
cl <- makeCluster(as.numeric(opt$ncores))
registerDoParallel(cl)
opt <- list(
indirectory="outputs/quantile_location/",
outdirectory="outputs/quantile_model_summaries/",
outname="1",
ncores="4"
)
gsub("/$", "", opt$indirectory)
opt$indirectory
opt <- list(
indirectory="outputs/quantile_location/",
outdirectory="outputs/quantile_model_summaries/",
outname="quantile_location_summary",
ncores="4"
)
library(readr)
model_summary <- readr::read_csv("./outputs/model_summaries/quantile_location_summary.csv")
model_summary
unique(model_summary$.variable)
model_summary %>%
filter(model==ADMO_NAME)
model_summary %>%
filter(model==ADM0_NAME)
model_summary %>%
filter(model=="ADM0_NAME")
model_summary %>%
filter(model=="ADM0_NAME") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point
model_summary %>%
filter(model=="ADM0_NAME") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()
model_summary %>%
filter(model=="ADM0_NAME", .variable="sd_ADM0_NAME__Intercept") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()
model_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()
model_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept")
?geom_segment
model_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(x=quantile, xend=quantile, y=.lower, yend=.upper)
odel_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept")
model_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept")
model_summary %>%
filter(model=="ADM0_NAME", .variable=="sd_ADM0_NAME__Intercept") %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
model <- "ADM0_NAME"
param <- "sd_ADM0_NAME__Intercept"
model_summary %>%
filter(model==model, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
odel_summary %>%
filter(model==model, .variable==param) %>%
ggplot(aes(x=quantile,y=.value))
model_summary %>%
filter(model==model, .variable==param)
model_name <- "ADM0_NAME"
param <- "sd_ADM0_NAME__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
model_summary
model_summary %>%
filter(model==model_name) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
facet_wrap(.variable)
?facet_wrap
model_summary %>%
filter(model==model_name) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
facet_wrap(vars(.variable))
model_summary
unique(model_summary$model)
model_name <- "ADM0_NAME_ADM2_CODE_village"
# param <- "sd_ADM0_NAME__Intercept"
model_summary %>%
filter(model==model_name) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
facet_wrap(vars(.variable))
unique(model_summary$.variable)
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM1_CODE:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
model_summary %>%
filter(model==model_name, .variable==param)
model_summary
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title=paste0("Parameter Estimates from Quantile Model:",model_name, "Params"),
subtitle = "Lines represent 95% credible intervals")
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParams: ",param),
caption = "Lines represent 95% credible intervals")
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParams: ",param),
caption = "Lines represent 95% credible intervals")
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Points represent estimates. Lines represent 95% credible intervals")
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
param <- "sd_ADM0_NAME__Intercept"
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
model_summary %>%
filter(model==model_name) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
scale_x_continuous(breaks=seq(0,1,0.1))+
facet_wrap(vars(.variable))
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
scale_x_continuous(breaks=seq(0,1,0.1))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
unique(model_summary$.variable)
param <- "b_Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
scale_x_continuous(breaks=seq(0,1,0.1))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Points represent estimates. Lines represent 95% credible intervals")
model_summary
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
model <- loadRData("./outputs/quantile_location/ADM0_NAME_ADM2_CODE_village_0.1.rda")
model
exp(0.4)
exp(0.5)
model_name <- "ADM0_NAME_ADM2_CODE_village"
param <- "sd_ADM0_NAME:ADM2_CODE__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
scale_x_continuous(breaks=seq(0,1,0.1))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Lines represent 95% credible intervals")
model_summary
param <- "sd_ADM0_NAME:ADM2_CODE:village__Intercept"
model_summary %>%
filter(model==model_name, .variable==param) %>%
ggplot(aes(x=quantile,y=.value)) +
geom_point()+
geom_segment(aes(x=quantile, xend=quantile, y=.lower, yend=.upper))+
scale_x_continuous(breaks=seq(0,1,0.1))+
labs(y=param, title = "Quantile Model",subtitle=paste0("Levels: ",model_name, "\nParam: ",param),
caption = "Points represent estimates. Lines represent 95% credible intervals")
exp(0.35)
exp(0.5)
exp(010)
exp(1)
exp(20)
exp(500)
log2.71
log(2.71)
model_summary
model_summary <- model_summary[model_summary$.variable!="b_Intercept"]
model_summary <- readr::read_csv("./outputs/model_summaries/quantile_location_summary.csv")
model_summary <- model_summary[model_summary$.variable!="b_Intercept",]
