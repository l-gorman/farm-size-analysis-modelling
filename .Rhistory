and aggregated landscape variable.
Outliers have been removed using 99th percentile (>24ha)*
") +
theme(text = element_text(size = 16),
axis.text.y = element_text(colour = land_cult_corr$color)
)
ggplot(data = land_cult_corr, aes(y=var2, x=value)) +
geom_segment( aes(x=0, xend=value, y=var2, yend=var2), color="black")+
geom_point( size=4, aes(x=value, color=var_group)) +
scale_color_manual(values=colors) +
coord_cartesian(xlim = c(-0.3, 0.3), # This focuses the x-axis on the range of interest
clip = 'off')+
labs(title="Correlations with HFIAS",
x ="Pearsons Correlation Coeff", y ="Landscape predictiors",
color="Variable Class",
caption = "\nLandscape predictors sourced from GAEZ v4 and Google Earth Engine.
Environmental, land-cover, and socio-economic data aggregated to FAO GAUL level 2.
Length growing period and AEZ classes averaged for subnational area.
AEZ simplified 33 class has been used, only 10/33 AEZs featured in the data.
Correlations represent correlation between household level land cultivated (ha)
and aggregated landscape variable.
Outliers have been removed using 99th percentile (>24ha)*
") +
theme(text = element_text(size = 16),
axis.text.y = element_text(colour = land_cult_corr$color)
)
indicator_data$ppi_likelihood
table(is.na(indicator_data))
table(is.na(indicator_data$ppi_limit))
table(is.na(indicator_data$ppi_likelihood))
ggplot(data = land_cult_corr, aes(y=var2, x=value)) +
geom_segment( aes(x=0, xend=value, y=var2, yend=var2), color="black")+
geom_point( size=4, aes(x=value, color=var_group)) +
scale_color_manual(values=colors) +
coord_cartesian(xlim = c(-0.4, 0.4), # This focuses the x-axis on the range of interest
clip = 'off')+
labs(title="Correlations with HFIAS",
x ="Pearsons Correlation Coeff", y ="Landscape predictiors",
color="Variable Class",
caption = "\nLandscape predictors sourced from GAEZ v4 and Google Earth Engine.
Environmental, land-cover, and socio-economic data aggregated to FAO GAUL level 2.
Length growing period and AEZ classes averaged for subnational area.
AEZ simplified 33 class has been used, only 10/33 AEZs featured in the data.
Correlations represent correlation between household level land cultivated (ha)
and aggregated landscape variable.
Outliers have been removed using 99th percentile (>24ha)*
") +
theme(text = element_text(size = 16),
axis.text.y = element_text(colour = land_cult_corr$color)
)
brm_anov_vpc %>%
gather() %>%
ggplot(aes(y = key, x = value)) +
stat_halfeye(aes(fill = after_stat(level))) +
scale_fill_brewer(na.translate = FALSE) +
labs(y="", x="VPC",title = "Variance Partition Coefficients for 3 Level Hierarchical Model",subtitle=paste0("Levels: ",model_name),
caption = "Points represent estimates.\nThicker lines represent standard error.\n Thin lines represent 95% credible intervals")+
scale_y_discrete(name="VPC",
breaks=c("sd_ADM0_NAME__Intercept", "sd_ADM0_NAME:ADM2_CODE__Intercept", "sd_ADM0_NAME:ADM2_CODE:village__Intercept", "sigma"),
labels=c("Between Country", "Between Subcounty", "Between Village", "Unexplained\nVariance"))
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/exploratory-analysis/correlations_and_distributions.R")
ggplot(data = land_cult_corr, aes(y=var2, x=value)) +
geom_segment( aes(x=0, xend=value, y=var2, yend=var2), color="black")+
geom_point( size=2, aes(x=value), color="Orange") +
coord_cartesian(xlim = c(-0.3, 0.3), # This focuses the x-axis on the range of interest
clip = 'off')+
labs(title="Correlations with Land Cultivated (ha)",
x ="Pearsons Correlation Coeff", y ="Agro-Ecological Zone",
caption = "\nAEZ zones sourced from GAEZ v4 (simplified 33 class).
Households in the dataset covered 10 out of the 33 zones.
**Outliers have been removed using 99th percentile (>24ha)
")
ggplot(data = land_cult_corr, aes(y=var2, x=value)) +
geom_segment( aes(x=0, xend=value, y=var2, yend=var2), color="black")+
geom_point( size=4, aes(x=value, color=var_group)) +
scale_color_manual(values=colors) +
coord_cartesian(xlim = c(-0.4, 0.4), # This focuses the x-axis on the range of interest
clip = 'off')+
labs(title="Correlations with HFIAS",
x ="Pearsons Correlation Coeff", y ="Landscape predictiors",
color="Variable Class",
caption = "\nLandscape predictors sourced from GAEZ v4 and Google Earth Engine.
Environmental, land-cover, and socio-economic data aggregated to FAO GAUL level 2.
Length growing period and AEZ classes averaged for subnational area.
AEZ simplified 33 class has been used, only 10/33 AEZs featured in the data.
Correlations represent correlation between household level land cultivated (ha)
and aggregated landscape variable.
Outliers have been removed using 99th percentile (>24ha)*
") +
theme(text = element_text(size = 16),
axis.text.y = element_text(colour = land_cult_corr$color)
)
indicator_data
colnames(indicator_data)
corr_hh <- round(cor(indicator_data[c(x_hh,y)]),2) %>% tibble::as_tibble()
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"land_cultivated_ha",
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"livestock_tlu",
"land_cultivated_ha",
"ppi_likelihood")
corr_hh <- round(cor(indicator_data[c(x_hh,y)]),2) %>% tibble::as_tibble()
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"livestock_tlu",
"land_cultivated_ha",
"ppi_likelihood")
corr_hh <- round(cor(indicator_data[c(x_hh,y)]),2) %>% tibble::as_tibble()
corr_hh
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"livestock_tlu",
"land_cultivated_ha",
"ppi_likelihood")
corr_hh <- round(cor(indicator_data[c(x_hh,y)]),2) %>% tibble::as_tibble()
corr_hh$var <- colnames(corr_hh)
corr_hh <- corr_hh %>% pivot_longer(cols = colnames(corr_hh)[colnames(corr_hh)!="var"])
colnames(corr_hh) <- c("var1", "var2", "value")
corr_hh
corr_hh <- corr_hh[corr_hh$var1==y, ]
corr_hh <- corr_hh[corr_hh$var2!=y,]
corr_hh
y
test_df <- indicator_data[c(x_hh,y)]
complete.cases(test_df)
table(complete.cases(test_df))
test_df <- indicator_data[c(x_hh,y)]
test_df <- indicator_data[complete.cases(test_df)]
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"livestock_tlu",
"land_cultivated_ha",
"ppi_likelihood")
test_df <- indicator_data[c(x_hh,y)]
test_df <- indicator_data[complete.cases(test_df),]
corr_hh <- round(cor(indicator_data[c(x_hh,y)]),2) %>% tibble::as_tibble()
corr_hh <- round(cor(test_df),2) %>% tibble::as_tibble()
test_df
# Corellation with Household Level
x_hh <- c("hh_size_mae",
"livestock_tlu",
"land_cultivated_ha",
"ppi_likelihood")
test_df <- indicator_data[c(x_hh,y)]
test_df <- test_df[complete.cases(test_df),]
corr_hh <- round(cor(test_df),2) %>% tibble::as_tibble()
corr_hh
corr_hh$var <- colnames(corr_hh)
corr_hh <- corr_hh %>% pivot_longer(cols = colnames(corr_hh)[colnames(corr_hh)!="var"])
colnames(corr_hh) <- c("var1", "var2", "value")
corr_hh <- corr_hh[corr_hh$var1==y, ]
corr_hh <- corr_hh[corr_hh$var2!=y,]
corr_hh
setwd("../data-preperation/")
indicator_data <- readr::read_csv("data/raw-data/rhomis/indicator_data.csv", na=c("-999","NA", "n/a"))
table(is.na(indicator_data$land_cultivated_ha))
rhomis_data <- readr::read_csv("data/raw-data/rhomis/processed_data.csv", na=c("-999","NA", "n/a"))
table(is.na(rhomis_data$x_gps_latitude))
table(is.na(rhomis_data$x_gps_latitude)& is.na(indicator_data$land_cultivated_ha))
table(is.na(rhomis_data$x_gps_latitude) | is.na(indicator_data$land_cultivated_ha))
rhomis_data[is.na(rhomis_data$x_gps_latitude) | is.na(indicator_data$land_cultivated_ha)),]
table(indicator_data$iso_country_code[is.na(rhomis_data$x_gps_latitude) | is.na(indicator_data$land_cultivated_ha)])
setwd("../farm-size-analysis-ssa/")
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-ee-gaez.csv"))
opt <- list(
iter=2000,
warmup=1000,
data="./data/",
output="./outputs/gaussian_location/",
ncores=4
)
run_model <- function(data,levels, quantile=NULL, sigma, iter, warmup,ncores ){
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("hfias_numeric ~ 1 + (1|",levels_args,")")
if (sigma==F & is.null(quantile)){
final_formula <- bf(temp_formula)
family <- gaussian()
}
if (sigma==T & is.null(quantile)){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==F){
final_formula <- bf(temp_formula, quantile=quantile)
family <- asym_laplace()
}
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==T){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
family <- asym_laplace()
}
}
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = ncores,
warmup = warmup,
iter=iter
)
return(result)
}
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-ee-gaez.csv"))
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
indicator_data$fies_score
table(!is.na(indicator_data$hfias_status))
indicator_data$hfias_numeric<- NA
indicator_data$hfias_numeric[indicator_data$hfias_status=="severely_fi"] <- 1
indicator_data$hfias_numeric[indicator_data$hfias_status=="moderately_fi"] <- 2
indicator_data$hfias_numeric[indicator_data$hfias_status=="mildly_fi"] <- 3
indicator_data$hfias_numeric[indicator_data$hfias_status=="food_secure"] <- 4
nrow(indicator_data)
level_combos <- list(
# c("ADM0_NAME"),
# c("ADM0_NAME","ADM1_CODE"),
# c("ADM0_NAME","ADM1_CODE","ADM2_CODE"),
# c("ADM0_NAME","ADM1_CODE","ADM2_CODE","village"),
c("ADM2_CODE","village")
)
level_combos
data
unique(indicator_data$iso_country_code)
country_codes <- unique(indicator_data$iso_country_code)
country_codes
level_combo
is.na(indicator_data$iso_country_code)
table(is.na(indicator_data$iso_country_code))
country_codes
length( sbatch src/bc-run-scripts/run_brms_anova_location_per_country.sh  -i 2000 -w 1000 -n 4 -o brms_anova_food_sec_06_03_2023)
length(country_codes)
table(indicator_data$ADM2_CODE)
length(table(indicator_data$ADM2_CODE))
table(unique(indicator_data$village))
length(unique(indicator_data$village))
library(sf)
library(sp)
library(stars)
library(geojsonsf)
library(corrplot)
library(raster)
library(leaflet)
library(mapview)
library(maps)
library("rnaturalearth")
library("rnaturalearthdata")
# # Graph Plotting
library(ggplot2)
# library(ggridges)
library(ggExtra)
library(RColorBrewer)
library(GGally)
indicator_data <- readr::read_csv("./data/prepped-data/rhomis-ee-gaez.csv")
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
indicator_data <- indicator_data[!is.na(indicator_data$hfias_status),]
indicator_data_geo <- st_as_sf(indicator_data, coords = c("x_gps_latitude", "x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
fao_level_2 <- geojson_sf('data/prepped-data/fao_level_2.geojson')
fao_level_2 <- sf::st_as_sf(x = fao_level_2, wkt = "geometry")
fao_level_2_geo <-st_set_crs(fao_level_2,'EPSG:4326')
fao_level_2_geo <- st_simplify(fao_level_2_geo, 10000)
fao_level_2 <- tibble::as_tibble(fao_level_2)
fao_level_2_geo$ADM0_NAME
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda"]) +
geom_sf()
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Tanzania",]) +
geom_sf()
fao_level_2_geo$ADM0_NAME
unique(fao_level_2_geo$ADM0_NAME)
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="United Republic of Tanzania",]) +
geom_sf()
# FAO administrative data
fao_level_2 <- geojson_sf('data/prepped-data/fao_level_2.geojson')
fao_level_2 <- sf::st_as_sf(x = fao_level_2, wkt = "geometry")
fao_level_2_geo <-st_set_crs(fao_level_2,'EPSG:4326')
# fao_level_2_geo <- st_simplify(fao_level_2_geo, 10000)
fao_level_2 <- tibble::as_tibble(fao_level_2)
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()
ggplot(data = world[world$continent=="Africa",]) +
geom_sf(aes(fill=highlight), color="black")+
geom_sf(date=fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",],inherit.aes = F)+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$highlight <- world$wb_a2 %in% indicator_data$iso_country_code
ggplot(data = world[world$continent=="Africa",]) +
geom_sf(aes(fill=highlight), color="black")+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
ggplot(data = world[world$continent=="Africa",]) +
geom_sf(aes(fill=highlight), color="black")+
geom_sf(date=fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",],inherit.aes = F)+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
ggplot(data = world[world$continent=="Africa",]) +
geom_sf(aes(fill=highlight), color="black")+
geom_sf(data=fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",],inherit.aes = F)+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
world
library(sf)
library(sp)
library(stars)
library(geojsonsf)
library(corrplot)
library(raster)
library(leaflet)
library(mapview)
library(maps)
library("rnaturalearth")
library("rnaturalearthdata")
# # Graph Plotting
library(ggplot2)
# library(ggridges)
library(ggExtra)
library(RColorBrewer)
library(GGally)
indicator_data <- readr::read_csv("./data/prepped-data/rhomis-ee-gaez.csv")
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
indicator_data <- indicator_data[!is.na(indicator_data$hfias_status),]
indicator_data_geo <- st_as_sf(indicator_data, coords = c("x_gps_latitude", "x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
# FAO administrative data
fao_level_2 <- geojson_sf('data/prepped-data/fao_level_2.geojson')
fao_level_2 <- sf::st_as_sf(x = fao_level_2, wkt = "geometry")
fao_level_2_geo <-st_set_crs(fao_level_2,'EPSG:4326')
# fao_level_2_geo <- st_simplify(fao_level_2_geo, 10000)
fao_level_2 <- tibble::as_tibble(fao_level_2)
ggplot(data = world[world$wb_a2=="RW",]) +
geom_sf(aes(fill=highlight), color="black")+
geom_sf(data=fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",],inherit.aes = F)+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
# FAO administrative data
fao_level_2 <- geojson_sf('data/raw-data/earth-engine/fao-gaul-level-2.geojson')
ggplot(data = ) +
geom_sf(aes(fill=highlight), color="black")
fao_level_2 <- sf::st_as_sf(x = fao_level_2, wkt = "geometry")
fao_level_2_geo <-st_set_crs(fao_level_2,'EPSG:4326')
fao_level_2_geo$ADM0_NAME=="Rwanda"
table(fao_level_2_geo$ADM0_NAME=="Rwanda")
ggplot(data = fao_level_2_geo$ADM0_NAME=="Rwanda") +
geom_sf(aes(fill=highlight), color="black")
ggplot(data = fao_level_2_geo$ADM0_NAME=="Rwanda") +
geom_sf()
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda"m]) +
geom_sf()
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()+
theme_void() + theme(legend.position="none")
ggplot(data = world[world$continent=="Africa",]) +
geom_sf(aes(fill=highlight), color="black")+
scale_fill_manual(values = c("white", "dodgerblue4"))+
theme_void() + theme(legend.position="none")
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()+
theme_void() + theme(legend.position="none")
indicator_data %>%
filter(iso_country_code=="RW")
indicator_data
indicator_data %>%
filter(iso_country_code=="RW")%>%
group_by(village)
indicator_data %>%
filter(iso_country_code=="RW")
library(dplyr)
indicator_data %>%
filter(iso_country_code=="RW")
rhomis_data <- readr::read_csv("./data/raw-data/rhomis/processed_data.csv")
rhomis_data <- rhomis_data[!is.na(rhomis_data$x_gps_latitude) & !is.na(rhomis_data$x_gps_longitude),]
rhomis_data <- rhomis_data[!is.na(rhomis_data$village),]
nrow(rhomis_data)
rhomis_data %>%
filter(country=="rwanda")
rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village)
rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(village_lat=mean(x_gps_latitude, na.rm=T),
village_lon=mean(x_gps_longitude, na.rm=T))
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(village_lat=mean(x_gps_latitude, na.rm=T),
village_lon=mean(x_gps_longitude, na.rm=T))
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(village_lat=mean(x_gps_latitude, na.rm=T),
village_lon=mean(x_gps_longitude, na.rm=T))
village_points <- st_as_sf(village_points, coords = c("x_gps_latitude", "x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(x_gps_latitude=mean(x_gps_latitude, na.rm=T),
x_gps_longitude=mean(x_gps_longitude, na.rm=T))
village_points <- st_as_sf(village_points, coords = c("x_gps_latitude", "x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
village_points
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()+
geom_sf(data=village_points)+
theme_void() + theme(legend.position="none")
?st_as_sf
village_points <- st_as_sf(village_points, coords = c( "x_gps_longitude","x_gps_latitude"),
crs = 4326, agr = "constant", remove = F)
ggplot(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",]) +
geom_sf()+
geom_sf(data=village_points)+
theme_void() + theme(legend.position="none")
rhomis_data <- readr::read_csv("./data/raw-data/rhomis/processed_data.csv")
rhomis_data <- rhomis_data[!is.na(rhomis_data$x_gps_latitude) & !is.na(rhomis_data$x_gps_longitude),]
rhomis_data <- rhomis_data[!is.na(rhomis_data$village),]
rhomis_data_geo<- st_as_sf(indicator_data, coords = c("x_gps_latitude", "x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
rhomis_data_geo
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(x_gps_latitude=mean(x_gps_latitude, na.rm=T),
x_gps_longitude=mean(x_gps_longitude, na.rm=T))
village_points
village_points <- st_as_sf(village_points, coords = c( "x_gps_longitude","x_gps_latitude"),
crs = 4326, agr = "constant", remove = F)
village_points
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(x_gps_latitude=mean(x_gps_latitude, na.rm=T),
x_gps_longitude=mean(x_gps_longitude, na.rm=T))
village_points <- st_as_sf(village_points, coords = c( "x_gps_latitude","x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
village_points
fao_level_2_geo
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)+
theme_void() + theme(legend.position="none")
ggplot() +
# geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)+
ggplot() +
# geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(x_gps_latitude=mean(x_gps_latitude, na.rm=T),
x_gps_longitude=mean(x_gps_longitude, na.rm=T))
village_points <- st_as_sf(village_points, coords = c( "x_gps_latitude","x_gps_longitude"),
crs = 4326, agr = "constant", remove = F)
ggplot() +
# geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)
village_points <- rhomis_data %>%
filter(country=="rwanda")%>%
group_by(village) %>%
summarise(x_gps_latitude=mean(x_gps_latitude, na.rm=T),
x_gps_longitude=mean(x_gps_longitude, na.rm=T))
village_points <- st_as_sf(village_points, coords = c( "x_gps_longitude","x_gps_latitude"),
crs = 4326, agr = "constant", remove = F)
ggplot() +
# geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=village_points)+
theme_void() + theme(legend.position="none")
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=indicator_data_geo)+
theme_void() + theme(legend.position="none")
indicator_data_geo <- st_as_sf(indicator_data, coords = c( "x_gps_longitude","x_gps_latitude"),
crs = 4326, agr = "constant", remove = F)
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=indicator_data_geo[indicator_data_geo$iso_country_code=="RW",])+
theme_void() + theme(legend.position="none")
indicator_data_geo$x_gps_latitude
nrow(village_points)
village_points
unique(village_points$village)
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=st_jitter(indicator_data_geo[indicator_data_geo$iso_country_code=="RW",], factor=0.05))+
theme_void() + theme(legend.position="none")
ggplot() +
geom_sf(data = fao_level_2_geo[fao_level_2_geo$ADM0_NAME=="Rwanda",])+
geom_sf(data=st_jitter(indicator_data_geo[indicator_data_geo$iso_country_code=="RW",], factor=0.01))+
theme_void() + theme(legend.position="none")
