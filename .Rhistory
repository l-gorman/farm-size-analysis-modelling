# colnames(fao_level_2)[colnames(fao_level_2) %in% land_cat_columns] <- new_land_cat_columns
colnames(indicator_data)[colnames(indicator_data) == "accessibility_mean"] <-"healthcare_traveltime"
colnames(indicator_data)[colnames(indicator_data) == "b1_mean_mean"] <- "nightlights"
colnames(indicator_data)[colnames(indicator_data) == "population_density_mean_mean"] <- "population_density"
colnames(indicator_data)[colnames(indicator_data) == "elevation_mean"] <- "elevation"
colnames(indicator_data)[colnames(indicator_data) == "NDVI_mean_mean"] <- "ndvi"
colnames(indicator_data)[colnames(indicator_data) == "constant_mean"] <- "topographic_diversity"
indicator_data$geo_id <- paste0(indicator_data$ADM0_CODE, "_",
indicator_data$ADM1_CODE, "_",
indicator_data$ADM2_CODE)
all_formula <- list(
adm0=bf(log(land_cultivated_ha)~(1|ADM0_NAME)),
adm0_adm1=bf(log(land_cultivated_ha)~(1|ADM0_NAME/ADM1_CODE)),
adm0_adm1_adm_2=bf(log(land_cultivated_ha)~(1|ADM0_NAME/ADM1_CODE/ADM2_CODE)),
adm0_adm1_adm_2_village=bf(log(land_cultivated_ha)~(1|ADM0_NAME/ADM1_CODE/ADM2_CODE/village)),
adm0_adm_2_village=bf(log(land_cultivated_ha)~(1|ADM0_NAME/ADM2_CODE/village))
)
quantiles <- seq(0.1,0.9,0.1)
indicator_data
dir.create(paste0(opt$output,"gaussian_location/"))
opt$output
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$n_cores,
warmup = opt$warmup,
iter=opt$iter
)
save(adm0_anova,file=paste0(opt$output,"gaussian_location/",formula_name,".rda"))
}
opt$warmup
opt <- list(
iter=2,
warmup=1,
data="./data/",
output="./outputs/brm_anov_31_01_2023/",
ncores=4
)
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$n_cores,
warmup = opt$warmup,
iter=opt$iter
)
save(adm0_anova,file=paste0(opt$output,"gaussian_location/",formula_name,".rda"))
}
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
save(adm0_anova,file=paste0(opt$output,"gaussian_location/",formula_name,".rda"))
}
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
save(result,file=paste0(opt$output,"gaussian_location/",formula_name,".rda"))
}
paste0(opt$output,"gaussian_location/",formula_name,".rda")
opt <- list(
iter=2,
warmup=1,
data="./data/",
output="./outputs/brm_anov_31_01_2023/",
ncores=4
)
dir.create(opt$output)
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
opt$output
dir.create(paste0(opt$output,"/gaussian_location/"))
result
result
save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
}
all_formula <- list(
adm0=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME)),
adm0_adm1=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE)),
adm0_adm1_adm_2=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE)),
adm0_adm1_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE/village)),
adm0_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM2_CODE/village))
)
for (formula_name in names(all_formula)){
formula_temp <- all_formula[[formula_name]]
result <- brms::brm(
formula = formula_temp,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
}
bf("log(land_cultivated_ha)~1+(1|ADM0_NAME)")
all_quantile_formula <-list(
adm0=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME)),
adm0_adm1=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE)),
adm0_adm1_adm_2=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE)),
adm0_adm1_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE/village)),
adm0_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM2_CODE/village))
)
all_quantile_formula[1]
all_quantile_formula <-list(
adm0=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME),
quantile=quantile_to_insert),
adm0_adm1=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE),
quantile=quantile_to_insert),
adm0_adm1_adm_2=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE),
quantile=quantile_to_insert),
adm0_adm1_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM1_CODE/ADM2_CODE/village),
quantile=quantile_to_insert),
adm0_adm_2_village=bf(log(land_cultivated_ha)~1+(1|ADM0_NAME/ADM2_CODE/village),
quantile=quantile_to_insert)
)
levels <- c("ADM0_NAME", "ADM1_NAME", "village")
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
temp_formula
?bf
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
bf(temp_formula, sigma_formula)
quantile
quantile <- 0.1
quantile_arg <- paste0("quantile=",quantile)
quantile_arg
return(bf(temp_formula, quantile_arg))
bf(temp_formula, quantile_arg)
brm_args <- c(temp_formula)
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
brm_args <- c(brm_args,sigma_formula)
brm_args
brm_args <- c(brm_args,quantile_arg)
brm_args
bf(brm_args)
brm_args
brm_args_final <- paste0(brm_args, collapse=",\n")
brm_args_final
brm_args_final <- paste0(brm_args, collapse=",")
bf(brm_args_final)
brm_args_final
bf(list(brm_args))
list(brm_args)
bf(list(brm_args)[[1]])
result <- brms::brm(
flist=brm_args_final,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
?bf
brm_args
bf(brm_args)
bf(brm_args[1],brm[2],brm[3])
bf(brm_args[1],brm_args[2],brm_args[3])
levels <- c("ADM0_NAME", "ADM1_NAME", "village")
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
bf(temp_formula)
bf(temp_formula, sigma_formula)
(bf(temp_formula, quantile_arg)
)
bf(temp_formula, quantile=0.1)
bf(temp_formula, quantile=quantile)
bf(temp_formula, sigma_formula,quantile=quantile)
indicator_data
opt$ncores
opt$warmup
opt$iter
final_formula
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
final_formula
result <- brms::brm(
formula=final_formula,
data = indicator_data,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
gaussian()
family <- asym_laplace()
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
result
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
final_formula
family
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
levels <- list(
c("ADM0_NAME"),
c("ADM0_NAME","ADM1_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE","village"),
c("ADM0_NAME","ADM2_CODE","village"),
)
levels <- list(
c("ADM0_NAME"),
c("ADM0_NAME","ADM1_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE","village"),
c("ADM0_NAME","ADM2_CODE","village")
)
run_model <- function(data,levels, quantile=NULL, sigma, iter, warmup,ncores ){
levels <- c("ADM0_NAME", "ADM1_NAME", "village")
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
if (sigma==F & is.null(quantile)){
final_formula <- bf(temp_formula)
family <- gaussian()
}
if (sigma==T & is.null(quantile)){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==F){
final_formula <- bf(temp_formula, quantile=quantile)
family <- asym_laplace()
}
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==T){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
family <- asym_laplace()
}
}
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = opt$ncores,
warmup = opt$warmup,
iter=opt$iter
)
return(result)
}
level_combos[1]
level_combos <- list(
c("ADM0_NAME"),
c("ADM0_NAME","ADM1_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE"),
c("ADM0_NAME","ADM1_CODE","ADM2_CODE","village"),
c("ADM0_NAME","ADM2_CODE","village")
)
level_combos[1]
level_combos[2]
result
for (level_combo in level_combos){
print(level_combo[1])
# result <- run_model(data,levels, quantile=NULL, sigma, iter, warmup,ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
# save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
}
for (level_combo in level_combos){
print(level_combo)
# result <- run_model(data,levels, quantile=NULL, sigma, iter, warmup,ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
# save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
}
run_model <- function(data,levels, quantile=NULL, sigma, iter, warmup,ncores ){
levels <- c("ADM0_NAME", "ADM1_NAME", "village")
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
if (sigma==F & is.null(quantile)){
final_formula <- bf(temp_formula)
family <- gaussian()
}
if (sigma==T & is.null(quantile)){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==F){
final_formula <- bf(temp_formula, quantile=quantile)
family <- asym_laplace()
}
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==T){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
family <- asym_laplace()
}
}
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = ncores,
warmup = warmup,
iter=iter
)
return(result)
}
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=NULL, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
# save(result,file=paste0(opt$output,"/gaussian_location/",formula_name,".rda"))
}
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=NULL, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(level_combo, collapse="_"),".rda"))
}
run_model <- function(data,levels, quantile=NULL, sigma, iter, warmup,ncores ){
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
if (sigma==F & is.null(quantile)){
final_formula <- bf(temp_formula)
family <- gaussian()
}
if (sigma==T & is.null(quantile)){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==F){
final_formula <- bf(temp_formula, quantile=quantile)
family <- asym_laplace()
}
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==T){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
family <- asym_laplace()
}
}
result <- brms::brm(
formula=final_formula,
data = indicator_data,
family=family,
cores = ncores,
warmup = warmup,
iter=iter
)
return(result)
}
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=NULL, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(level_combo, collapse="_"),".rda"))
}
load("outputs/brm_anov_31_01_2023/gaussian_location/ADM0_NAME_ADM1_CODE_ADM2_CODE_village.rda")
ADM0_NAME_ADM1_CODE_ADM2_CODE_village
result
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
d <- loadRData("outputs/brm_anov_31_01_2023/gaussian_location/ADM0_NAME_ADM1_CODE_ADM2_CODE_village.rda")
d
d <- loadRData("outputs/brm_anov_31_01_2023/gaussian_location/adm0_adm1.rda")
d
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=0.1, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(level_combo, collapse="_"),".rda"))
}
d <- loadRData("outputs/brm_anov_31_01_2023/gaussian_location/ADM0_NAME.rda")
d
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=0.1, sigma=T, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(level_combo, collapse="_"),".rda"))
}
d <- loadRData("outputs/brm_anov_31_01_2023/gaussian_location/ADM0_NAME.rda")
d
for (level_combo in level_combos){
result <- run_model(data,level_combo, quantile=0.1, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
# formula_temp <- all_formula[[formula_name]]
#
# result <- brms::brm(
#   formula = formula_temp,
#   data = indicator_data,
#   cores = opt$ncores,
#   warmup = opt$warmup,
#   iter=opt$iter
# )
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(level_combo, collapse="_"),".rda"))
}
dir.create(paste0(opt$output,"/quantile/"))
for (level_combo in level_combos){
for (quantile in seq(0.1,0.9,0.1)){
result <- run_model(data,level_combo, quantile=quantile, sigma=F, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
save(result,file=paste0(opt$output,"/gaussian_location/",paste0(paste0(level_combo, collapse="_"),"_",quantile),".rda"))
}
}
dir.create(paste0(opt$output,"/quantile_location_scale/"))
for (level_combo in level_combos){
for (quantile in seq(0.1,0.9,0.1)){
result <- run_model(data,level_combo, quantile=quantile, sigma=T, iter=opt$iter, warmup=opt$warmup,ncores=opt$ncores)
save(result,file=paste0(opt$output,"/quantile_location_scale/",paste0(paste0(level_combo, collapse="_"),"_",quantile),".rda"))
}
}
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
d <- loadRData("outputs/brm_anov_31_01_2023/quantile_location_scale/ADM0_NAME_0.1.rda")
d
d <- loadRData("outputs/brm_anov_31_01_2023/quantile_location_scale/ADM0_NAME_0.2.rda")
d
