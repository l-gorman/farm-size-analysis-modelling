temp <- ggplot(villages_per_area,
aes(x=iso_country_code,y=count))+
geom_boxplot(fill="dodgerblue4", colour="black", outlier.shape = NA)+
scale_y_continuous(limits = quantile(villages_per_area$count, c(0, 0.99)))+
labs(title="Villages Per Subnational Area",x="Country", y="Number of Villages in Subnational Area")
ggsave("outputs/geographical_counts/villages_per_subnational_region.png",temp)
#-------------------------------------------------------------------------
indicator_data$village[indicator_data$iso_country_code=="NG"]
villages_per_area <- indicator_data %>%
group_by(iso_country_code,gdlcode) %>% summarise(count = n_distinct(village))
ggplot(villages_per_area,
aes(x=iso_country_code,y=count))+
geom_boxplot(fill="dodgerblue4", colour="black", outlier.shape = NA)+
scale_y_continuous(limits = quantile(villages_per_area$count, c(0, 0.99)))+
labs(title="Villages Per Subnational Area",x="Country", y="Number of Villages in Subnational Area")
ggsave("outputs/geographical_counts/villages_per_subnational_region.png",temp)
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
# people_per_county -------------------------------------------------------
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/continental_gaussian_location_test/",
ncores=4
)
library(brms)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(ggdist)
library(magrittr)
library(optparse)
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
dir.create(opt$output)
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
run_model <- function(data,levels, quantile=NULL, sigma, iter, warmup,ncores ){
levels_args <- paste0(levels,collapse="/")
temp_formula <- paste0("log(land_cultivated_ha) ~ 1 + (1|",levels_args,")")
if (sigma==F & is.null(quantile)){
final_formula <- bf(temp_formula)
family <- gaussian()
}
if (sigma==T & is.null(quantile)){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula)
family <- gaussian()
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==F){
final_formula <- bf(temp_formula, quantile=quantile)
family <- asym_laplace()
}
}
if (!is.null(quantile)){
if (quantile>0 & quantile < 1 & sigma==T){
sigma_formula <- paste0("sigma ~ 1 + (1|",levels_args,")")
final_formula <- bf(temp_formula, sigma_formula,quantile=quantile)
family <- asym_laplace()
}
}
result <- brms::brm(
formula=final_formula,
data = data,
family=family,
cores = ncores,
warmup = warmup,
iter=iter,
control = list(adapt_delta = 0.95)
)
return(result)
}
# indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-ee-gaez.csv"))
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-gaez-gdl.csv"))
nrow(indicator_data)
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/exploratory-analysis/geographic_tallies.R")
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/evaluation/vpc_plots.R")
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/evaluation/vpc_plots.R")
readable_params
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/evaluation/vpc_plots.R")
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/evaluation/vpc_plots.R")
source("~/research/phd/farm-size-modelling-final/farm-size-analysis-ssa/src/evaluation/vpc_plots.R")
vpc_summary
final_summary
final_summary %>% gather(cols=!Value)
?pivot_longer
final_summary %>% pivot_longer(
cols = BF:`All Countries`
)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% ggplot(aes(x=value,y=name))+
geom_point()+
facet_wrap(name)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% ggplot(aes(x=value,y=name))+
geom_point()+
facet_wrap(~Parameter)
final_summary
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% ggplot(aes(x=value,y=name))+
geom_point()+
facet_wrap(~Parameter)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(Value)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
facet_wrap(~Parameter)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_hline(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_hline(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],yintercept=name))
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_segment(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_segment(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))+
facet_wrap(~Parameter)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_segment(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))+
facet_wrap(~Parameter)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
filter(name!="All Countries") %>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_segment(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))+
facet_wrap(~Parameter)
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
filter(name!="All Countries")
final_summary %>% pivot_longer(
cols = BF:`All Countries`
) %>% pivot_wider(id_cols = c("Parameter","name"),names_from = "Value",values_from = "value")%>%
filter(name!="All Countries" & Parameter!="Between Country") %>%
ggplot(aes(x=Estimate,y=name))+
geom_point()+
geom_segment(aes(x=.data[["l-95% CI"]],xend=.data[["u-95% CI"]],y=name,yend=name))+
facet_wrap(~Parameter)
#' Exploring and Analysing Farm-Size Dsitributions
# -------------------------------------------------------------------------------------------------------------
# Loading Libraries -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------
# Data Cleaning and reformatting
library(readr)
library(dplyr)
library(tibble)
library(projpred)
library(brms)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(ggdist)
library(magrittr)
library(optparse)
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/projpred_test/",
ncores=4
)
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
dir.create(opt$output)
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-gaez-gdl.csv"))
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$land_cultivated_ha),]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha>0,]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha<100,]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
x_vars <- c(
#Household Level,
# "livestock_tlu",
# "hh_size_mae",
# Village Level
"adjusted_length_growing_period",
"AEZ_Classes_33_cold_no_permafrost_moist",
"AEZ_Classes_33_cold_no_permafrost_wet",
"AEZ_Classes_33_desert_or_arid_climate",
"AEZ_Classes_33_dominantly_built_up_land",
"AEZ_Classes_33_dominantly_hydromorphic_soils",
"AEZ_Classes_33_dominantly_very_steep_terrain",
"AEZ_Classes_33_dominantly_water",
"AEZ_Classes_33_land_with_ample_irrigated_soils",
"AEZ_Classes_33_land_with_severe_soil_or_terrain_limitations",
"AEZ_Classes_33_sub_tropics_cool_semi_arid",
"AEZ_Classes_33_sub_tropics_moderately_cool_semi_arid",
"AEZ_Classes_33_sub_tropics_moderately_cool_sub_humid",
"AEZ_Classes_33_sub_tropics_warm_humid",
"AEZ_Classes_33_sub_tropics_warm_semi_arid",
"AEZ_Classes_33_temperate_cool_wet",
"AEZ_Classes_33_tropics_highland_humid",
"AEZ_Classes_33_tropics_highland_semi_arid",
"AEZ_Classes_33_tropics_highland_sub_humid",
"AEZ_Classes_33_tropics_lowland_humid",
"AEZ_Classes_33_tropics_lowland_semi_arid",
"AEZ_Classes_33_tropics_lowland_sub_humid",
#Subcounty Level
"gdl_healthindex",
"gdl_sgdi",
"gdl_shdi",
"gdl_lifexp"
)
aez_cols <- grep("AEZ", colnames(indicator_data))
aez_cols <- grep("AEZ", colnames(indicator_data),value=T)
aez_cols
AEZ_Classes_33 <- AEZ_Classes_33[AEZ_Classes_33!="AEZ_Classes_33"]
aez_cols <- aez_cols[aez_cols!="AEZ_Classes_33"]
aez_cols
colSums(indicator_data[aez_cols]==0)
colSums(indicator_data[aez_cols]!=0)
library()
library(projpred)
?varsel
?cv_varsel
?cv_varsel
ref_model
ref_model <- loadRData(paste0(opt$output,"/proj_pred/proj_pred_ref_model.rda"))
library(brms)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(ggdist)
library(magrittr)
library(optparse)
library(projpred)
# Solution to globals size, found here:
# https://stackoverflow.com/questions/40536067/how-to-adjust-future-global-maxsize
options(future.globals.maxSize = 8000 * 1024^2)
### Only for technical reasons in this vignette (you can omit this when running
### the code yourself):
###
option_list = list(
make_option(c("-o", "--output"), type='character',
help="The directory where results will be written"),
make_option(c("-c", "--ncores"), type='character',
help="The number of chains/cores")
)
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
#
#
opt <- list(
iter=20,
warmup=10,
output="./outputs/21_03_2023/proj_pred/proj_pred_ref_model.rda",
ncores=4
)
#
#
# opt <- list(
#   iter=20,
#   warmup=10,
#   output="./outputs/21_03_2023/proj_pred/proj_pred_ref_model.rda",
#   ncores=4
# )
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
options(mc.cores = opt$ncores)
opt <- list(
iter=20,
warmup=10,
output="./outputs/21_03_2023/",
ncores=4
)
#
#
# opt <- list(
#   iter=20,
#   warmup=10,
#   output="./outputs/21_03_2023/",
#   ncores=4
# )
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
options(mc.cores = opt$ncores)
dir.create(opt$output)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
ref_model <- loadRData(paste0(opt$output,"/proj_pred/proj_pred_ref_model.rda"))
ref_model <- get_refmodel(ref_model)
ref_model
?get_refmodel
brms::get_refmodel.brmsfit(ref_model)
get_refmodel.brmsfit(ref_model)
library(brms)
brms
brms::get_refmodel.brmsfit(ref_model)
varsel(ref_model)
indicator_data
indicator_data
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-gaez-gdl.csv"))
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$land_cultivated_ha),]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha>0,]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha<100,]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
# indicator_data$total_income_ppp_per_year <- indicator_data$total_income_lcu_per_year/indicator_data$currency_conversion_lcu_to_ppp
# indicator_data$value_farm_products_consumed_ppp_per_hh_per_year <- indicator_data$value_farm_products_consumed_lcu_per_hh_per_year/indicator_data$currency_conversion_lcu_to_ppp
#
# hist(indicator_data$total_income_ppp_per_year)
# quantile(indicator_data$total_income_ppp_per_year, probs=c(0.1,0.25,0.5,0.75,0.9),na.rm = T)
# quantile(indicator_data$value_farm_products_consumed_ppp_per_hh_per_year, probs=c(0.1,0.25,0.5,0.75,0.9), na.rm = T)
# quantile(indicator_data$c, probs=c(0.1,0.25,0.5,0.75,0.9), na.rm = T)
aez_cols <- grep("AEZ", colnames(indicator_data),value=T)
aez_cols <- aez_cols[aez_cols!="AEZ_Classes_33"]
indicator_data$aez_col <- colnames(indicator_data[aez_cols])[max.col(indicator_data[aez_cols])]
indicator_data$aez_col <- gsub("AEZ_Classes_33_","AEZ_Class_",indicator_data$aez_col)
indicator_data$aez_col <- as.factor(indicator_data$aez_col)
travel_time_cols <- grep("travel_time", colnames(indicator_data), value=T)
min_travel_time <-  apply( indicator_data[travel_time_cols], 1, min)
indicator_data$min_travel_time <- min_travel_time
table(indicator_data$head_education_level)
table(is.na(indicator_data$head_education_level))
education_conversions <- tribble(
~survey_value, ~conversion,
"postsecondary","postsecondary",
"college",   "postsecondary",
"illiterate",   "no_school",
"no_school",   "no_school",
"none", "no_school",
"enrolled_not_completed",   "enrolled_not_completed",
"no_answer", NA,
"primary","primary",
"primary_1","primary",
"primary_2","primary",
"religious_school","religious_school",
"islamic_school","religious_school",
"koranic_school", "religious_school",
"secondary","secondary",
"secondary_1","secondary",
"secondary_2","secondary",
"literate","literate",
"technical", "vocational",
"vocational", "vocational",
"adult_education",   "adult_education",
)
table(is.na(indicator_data$head_education_level))
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/projpred_test/",
ncores=4
)
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-gaez-gdl.csv"))
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$land_cultivated_ha),]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha>0,]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha<100,]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
# indicator_data$total_income_ppp_per_year <- indicator_data$total_income_lcu_per_year/indicator_data$currency_conversion_lcu_to_ppp
# indicator_data$value_farm_products_consumed_ppp_per_hh_per_year <- indicator_data$value_farm_products_consumed_lcu_per_hh_per_year/indicator_data$currency_conversion_lcu_to_ppp
#
# hist(indicator_data$total_income_ppp_per_year)
# quantile(indicator_data$total_income_ppp_per_year, probs=c(0.1,0.25,0.5,0.75,0.9),na.rm = T)
# quantile(indicator_data$value_farm_products_consumed_ppp_per_hh_per_year, probs=c(0.1,0.25,0.5,0.75,0.9), na.rm = T)
# quantile(indicator_data$c, probs=c(0.1,0.25,0.5,0.75,0.9), na.rm = T)
aez_cols <- grep("AEZ", colnames(indicator_data),value=T)
aez_cols <- aez_cols[aez_cols!="AEZ_Classes_33"]
indicator_data$aez_col <- colnames(indicator_data[aez_cols])[max.col(indicator_data[aez_cols])]
indicator_data$aez_col <- gsub("AEZ_Classes_33_","AEZ_Class_",indicator_data$aez_col)
indicator_data$aez_col <- as.factor(indicator_data$aez_col)
travel_time_cols <- grep("travel_time", colnames(indicator_data), value=T)
min_travel_time <-  apply( indicator_data[travel_time_cols], 1, min)
indicator_data$min_travel_time <- min_travel_time
table(indicator_data$head_education_level)
table(is.na(indicator_data$head_education_level))
education_conversions <- tribble(
~survey_value, ~conversion,
"postsecondary","postsecondary",
"college",   "postsecondary",
"illiterate",   "no_school",
"no_school",   "no_school",
"none", "no_school",
"enrolled_not_completed",   "enrolled_not_completed",
"no_answer", NA,
"primary","primary",
"primary_1","primary",
"primary_2","primary",
"religious_school","religious_school",
"islamic_school","religious_school",
"koranic_school", "religious_school",
"secondary","secondary",
"secondary_1","secondary",
"secondary_2","secondary",
"literate","literate",
"technical", "vocational",
"vocational", "vocational",
"adult_education",   "adult_education",
)
table(is.na(indicator_data$head_education_level))
indicator_data$head_education_level
indicator_data$head_education_level
unique(indicator_data$head_education_level)
new_education_level <- indicator_data["head_education_level"]
new_education_level$index <- c(1:nrow(new_education_level))
new_education_level <- new_education_level %>% merge(education_conversions, by.x="head_education_level", by.y = "survey_value", all.x = T, all.y=F)
new_education_level <- new_education_level[order(new_education_level$index),]
row.names(new_education_level) <- new_education_level$index
indicator_data$education <- new_education_level$conversion
unique(indicator_data$education)
indicator_data <- indicator_data[!is.na(indicator_data$education),]
unique(indicator_data$education)
indicator_data$education <- as.factor(indicator_data$education,
levels=c("no_school",
"primary",
"secondary",
"adult_education",
"religious_school",
"postsecondary",
"vocational",
"enrolled_not_completed",
"literate"))
indicator_data$education <- factor(indicator_data$education,
levels=c("no_school",
"primary",
"secondary",
"adult_education",
"religious_school",
"postsecondary",
"vocational",
"enrolled_not_completed",
"literate"),
ordered = F)
indicator_data$education
unique(indicator_data$education)
indicator_data$aez_col
unique(indicator_data$aez_col)
cat(unique(indicator_data$aez_col), sep = "\n")
cat(unique(as.character(indicator_data$aez_col)), sep = "\n")
indicator_data <- readr::read_csv(paste0(opt$data,"/prepped-data/rhomis-gaez-gdl.csv"))
indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
indicator_data <- indicator_data[!is.na(indicator_data$land_cultivated_ha),]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha>0,]
indicator_data <- indicator_data[indicator_data$land_cultivated_ha<100,]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
indicator_data
indicator_data
aez_cols <- grep("AEZ", colnames(indicator_data),value=T)
aez_cols <- aez_cols[aez_cols!="AEZ_Classes_33"]
aez_cols
indicator_data[aez_cols]
travel_time_cols <- grep("travel_time", colnames(indicator_data), value=T)
min_travel_time <-  apply( indicator_data[travel_time_cols], 1, min)
indicator_data$min_travel_time <- min_travel_time
library(dummy_cols)
library(fastDummies)
aez_cols
